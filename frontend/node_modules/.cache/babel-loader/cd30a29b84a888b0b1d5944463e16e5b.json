{"ast":null,"code":"\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const API_URL = 'http://localhost:5005'; // Backend URL\n\n// // Example component for login\n// const Login = () => {\n//   const [userName, setUserName] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [token, setToken] = useState('');\n\n//   const handleLogin = async () => {\n//     try {\n//       const response = await axios.post(`${API_URL}/auth/login`, { userName, password });\n//       setToken(response.data.token);\n//       // Store the token in localStorage or state as needed\n//     } catch (error) {\n//       console.error('Login error:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Login</h2>\n//       <input\n//         type=\"text\"\n//         value={userName}\n//         onChange={(e) => setUserName(e.target.value)}\n//         placeholder=\"Username\"\n//       />\n//       <input\n//         type=\"password\"\n//         value={password}\n//         onChange={(e) => setPassword(e.target.value)}\n//         placeholder=\"Password\"\n//       />\n//       <button onClick={handleLogin}>Login</button>\n//     </div>\n//   );\n// };\n\n// // Example component for managing employees\n// const EmployeeManagement = () => {\n//   const [employees, setEmployees] = useState([]);\n//   const [newEmployee, setNewEmployee] = useState({\n//     name: '',\n//     email: '',\n//     mobile: '',\n//     designation: '',\n//     gender: '',\n//     course: '',\n//     image: null,\n//   });\n\n//   // Fetch all employees\n//   useEffect(() => {\n//     const fetchEmployees = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/employees`, {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem('token')}`, // Use the token from login\n//           },\n//         });\n//         setEmployees(response.data);\n//       } catch (error) {\n//         console.error('Error fetching employees:', error);\n//       }\n//     };\n\n//     fetchEmployees();\n//   }, []);\n\n//   const handleCreateEmployee = async () => {\n//     const formData = new FormData();\n//     Object.keys(newEmployee).forEach(key => {\n//       formData.append(key, newEmployee[key]);\n//     });\n\n//     try {\n//       await axios.post(`${API_URL}/employees`, formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//     } catch (error) {\n//       console.error('Error creating employee:', error);\n//     }\n//   };\n\n//   const handleUpdateEmployee = async (id) => {\n//     const formData = new FormData();\n//     Object.keys(newEmployee).forEach(key => {\n//       formData.append(key, newEmployee[key]);\n//     });\n\n//     try {\n//       await axios.put(`${API_URL}/employees/${id}`, formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//     } catch (error) {\n//       console.error('Error updating employee:', error);\n//     }\n//   };\n\n//   const handleDeleteEmployee = async (id) => {\n//     try {\n//       await axios.delete(`${API_URL}/employees/${id}`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//     } catch (error) {\n//       console.error('Error deleting employee:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Employee Management</h2>\n//       {/* Form for creating or updating employees */}\n//       <input\n//         type=\"text\"\n//         value={newEmployee.name}\n//         onChange={(e) => setNewEmployee({ ...newEmployee, name: e.target.value })}\n//         placeholder=\"Name\"\n//       />\n//       {/* Add other input fields similarly */}\n//       <input\n//         type=\"file\"\n//         onChange={(e) => setNewEmployee({ ...newEmployee, image: e.target.files[0] })}\n//       />\n//       <button onClick={handleCreateEmployee}>Create Employee</button>\n\n//       <h3>Employee List</h3>\n//       <ul>\n//         {employees.map(emp => (\n//           <li key={emp._id}>\n//             {emp.name} - {emp.email}\n//             <button onClick={() => handleUpdateEmployee(emp._id)}>Update</button>\n//             <button onClick={() => handleDeleteEmployee(emp._id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// const App = () => {\n//   return (\n//     <div>\n//       <Login />\n//       <EmployeeManagement />\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const API_URL = 'http://localhost:5005'; // Backend URL\n\n// // Example component for login\n// const Login = ({ onLogin }) => {\n//   const [userName, setUserName] = useState('');\n//   const [password, setPassword] = useState('');\n\n//   const handleLogin = async () => {\n//     try {\n//       const response = await axios.post(`${API_URL}/auth/login`, { userName, password });\n//       localStorage.setItem('token', response.data.token);\n//       onLogin(); // Notify parent about successful login\n//     } catch (error) {\n//       console.error('Login error:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Login</h2>\n//       <input\n//         type=\"text\"\n//         value={userName}\n//         onChange={(e) => setUserName(e.target.value)}\n//         placeholder=\"Username\"\n//       />\n//       <input\n//         type=\"password\"\n//         value={password}\n//         onChange={(e) => setPassword(e.target.value)}\n//         placeholder=\"Password\"\n//       />\n//       <button onClick={handleLogin}>Login</button>\n//     </div>\n//   );\n// };\n\n// // Example component for managing employees\n// const EmployeeManagement = () => {\n//   const [employees, setEmployees] = useState([]);\n//   const [newEmployee, setNewEmployee] = useState({\n//     name: '',\n//     email: '',\n//     mobile: '',\n//     designation: '',\n//     gender: '',\n//     course: '',\n//     image: null,\n//   });\n//   const [editingEmployee, setEditingEmployee] = useState(null);\n\n//   // Fetch all employees\n//   useEffect(() => {\n//     const fetchEmployees = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/employees`, {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem('token')}`, // Use the token from login\n//           },\n//         });\n//         setEmployees(response.data);\n//       } catch (error) {\n//         console.error('Error fetching employees:', error);\n//       }\n//     };\n\n//     fetchEmployees();\n//   }, []);\n\n//   const handleCreateEmployee = async () => {\n//     const formData = new FormData();\n//     Object.keys(newEmployee).forEach(key => {\n//       formData.append(key, newEmployee[key]);\n//     });\n\n//     try {\n//       if (editingEmployee) {\n//         await axios.put(`${API_URL}/employees/${editingEmployee._id}`, formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data',\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\n//           },\n//         });\n//       } else {\n//         await axios.post(`${API_URL}/employees`, formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data',\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\n//           },\n//         });\n//       }\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//       setNewEmployee({\n//         name: '',\n//         email: '',\n//         mobile: '',\n//         designation: '',\n//         gender: '',\n//         course: '',\n//         image: null,\n//       });\n//       setEditingEmployee(null); // Clear the editing state\n//     } catch (error) {\n//       console.error('Error saving employee:', error);\n//     }\n//   };\n\n//   const handleUpdateEmployee = (employee) => {\n//     setNewEmployee(employee);\n//     setEditingEmployee(employee);\n//   };\n\n//   const handleDeleteEmployee = async (id) => {\n//     try {\n//       await axios.delete(`${API_URL}/employees/${id}`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//     } catch (error) {\n//       console.error('Error deleting employee:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Employee Management</h2>\n//       <form onSubmit={(e) => { e.preventDefault(); handleCreateEmployee(); }}>\n//         <input\n//           type=\"text\"\n//           value={newEmployee.name}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, name: e.target.value })}\n//           placeholder=\"Name\"\n//           required\n//         />\n//         <input\n//           type=\"email\"\n//           value={newEmployee.email}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, email: e.target.value })}\n//           placeholder=\"Email\"\n//           required\n//         />\n//         <input\n//           type=\"text\"\n//           value={newEmployee.mobile}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, mobile: e.target.value })}\n//           placeholder=\"Mobile No\"\n//           required\n//         />\n//         <input\n//           type=\"text\"\n//           value={newEmployee.designation}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, designation: e.target.value })}\n//           placeholder=\"Designation\"\n//           required\n//         />\n//         <select\n//           value={newEmployee.gender}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, gender: e.target.value })}\n//           required\n//         >\n//           <option value=\"\">Select Gender</option>\n//           <option value=\"M\">Male</option>\n//           <option value=\"F\">Female</option>\n//         </select>\n//         <input\n//           type=\"text\"\n//           value={newEmployee.course}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, course: e.target.value })}\n//           placeholder=\"Course\"\n//           required\n//         />\n//         <input\n//           type=\"file\"\n//           onChange={(e) => setNewEmployee({ ...newEmployee, image: e.target.files[0] })}\n//         />\n//         <button type=\"submit\">{editingEmployee ? 'Update Employee' : 'Create Employee'}</button>\n//       </form>\n\n//       <h3>Employee List</h3>\n//       <ul>\n//         {employees.map(emp => (\n//           <li key={emp._id}>\n//             {emp.name} - {emp.email}\n//             <button onClick={() => handleUpdateEmployee(emp)}>Update</button>\n//             <button onClick={() => handleDeleteEmployee(emp._id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// const App = () => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem('token'));\n\n//   const handleLogin = () => {\n//     setIsLoggedIn(true);\n//   };\n\n//   return (\n//     <div>\n//       {!isLoggedIn ? <Login onLogin={handleLogin} /> : <EmployeeManagement />}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// // src/App.js\n// import React, { useState, useEffect } from 'react';\n// import { BrowserRouter as Router, Route, Routes, useNavigate } from 'react-router-dom';\n// import Navbar from './components/Navbar';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import Dashboard from './components/Dashboard';\n// import EmployeeList from './components/EmployeeList';\n// import CreateEmployee from './components/CreateEmployee';\n// import EditEmployee from './components/EditEmployee';\n// import TestComponent from './components/TestComponent';\n// import axios from 'axios';\n\n// const API_URL = 'http://localhost:5005'; // Backend URL\n\n// const App = () => {\n//   const [employees, setEmployees] = useState([]);\n//   const [newEmployee, setNewEmployee] = useState({\n//     name: '',\n//     email: '',\n//     mobile: '',\n//     designation: '',\n//     gender: '',\n//     course: '',\n//     image: null,\n//   });\n//   const [editingEmployee, setEditingEmployee] = useState(null);\n//   const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem('token'));\n\n//   useEffect(() => {\n//     if (isLoggedIn) {\n//       const fetchEmployees = async () => {\n//         try {\n//           const response = await axios.get(`${API_URL}/employees`, {\n//             headers: {\n//               Authorization: `Bearer ${localStorage.getItem('token')}`,\n//             },\n//           });\n//           setEmployees(response.data);\n//         } catch (error) {\n//           console.error('Error fetching employees:', error);\n//         }\n//       };\n\n//       fetchEmployees();\n//     }\n//   }, [isLoggedIn]);\n\n//   const handleCreateEmployee = async () => {\n//     const formData = new FormData();\n//     Object.keys(newEmployee).forEach(key => {\n//       formData.append(key, newEmployee[key]);\n//     });\n\n//     try {\n//       if (editingEmployee) {\n//         await axios.put(`${API_URL}/employees/${editingEmployee._id}`, formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data',\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\n//           },\n//         });\n//       } else {\n//         await axios.post(`${API_URL}/employees`, formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data',\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\n//           },\n//         });\n//       }\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//       setNewEmployee({\n//         name: '',\n//         email: '',\n//         mobile: '',\n//         designation: '',\n//         gender: '',\n//         course: '',\n//         image: null,\n//       });\n//       setEditingEmployee(null); // Clear the editing state\n//     } catch (error) {\n//       console.error('Error saving employee:', error);\n//     }\n//   };\n\n//   const handleUpdateEmployee = (employee) => {\n//     setNewEmployee(employee);\n//     setEditingEmployee(employee);\n//   };\n\n//   const handleDeleteEmployee = async (id) => {\n//     try {\n//       await axios.delete(`${API_URL}/employees/${id}`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//     } catch (error) {\n//       console.error('Error deleting employee:', error);\n//     }\n//   };\n\n//   const handleLogin = () => {\n//     setIsLoggedIn(true);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     <Router>\n//       {isLoggedIn && <Navbar onLogout={handleLogout} />}\n//       <Routes>\n//         <Route path=\"/\" element={isLoggedIn ? <Dashboard /> : <Register onLogin={handleLogin} />} />\n//         <Route path=\"/login\" element={<Login onLogin={handleLogin} />} />\n//         <Route path=\"/register\" element={<Register onLogin={handleLogin} />} />\n//         <Route path=\"/dashboard\" element={isLoggedIn ? <Dashboard /> : <Login onLogin={handleLogin} />} />\n//         <Route path=\"/employee-list\" element={isLoggedIn ? <EmployeeList employees={employees} onUpdateEmployee={handleUpdateEmployee} onDeleteEmployee={handleDeleteEmployee} /> : <Login onLogin={handleLogin} />} />\n//         <Route path=\"/create-employee\" element={isLoggedIn ? <CreateEmployee newEmployee={newEmployee} setNewEmployee={setNewEmployee} handleCreateEmployee={handleCreateEmployee} /> : <Login onLogin={handleLogin} />} />\n//         <Route path=\"/edit-employee/:id\" element={isLoggedIn ? <EditEmployee handleUpdateEmployee={handleUpdateEmployee} /> : <Login onLogin={handleLogin} />} />\n//         <Route path=\"/test\" element={<TestComponent />} />\n//       </Routes>\n//     </Router>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/prabhatkumar/Downloads/mern-employee-management/frontend/src/App.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const API_URL = 'http://localhost:5005'; // Backend URL\n\n// // Example component for login\n// const Login = () => {\n//   const [userName, setUserName] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [token, setToken] = useState('');\n\n//   const handleLogin = async () => {\n//     try {\n//       const response = await axios.post(`${API_URL}/auth/login`, { userName, password });\n//       setToken(response.data.token);\n//       // Store the token in localStorage or state as needed\n//     } catch (error) {\n//       console.error('Login error:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Login</h2>\n//       <input\n//         type=\"text\"\n//         value={userName}\n//         onChange={(e) => setUserName(e.target.value)}\n//         placeholder=\"Username\"\n//       />\n//       <input\n//         type=\"password\"\n//         value={password}\n//         onChange={(e) => setPassword(e.target.value)}\n//         placeholder=\"Password\"\n//       />\n//       <button onClick={handleLogin}>Login</button>\n//     </div>\n//   );\n// };\n\n// // Example component for managing employees\n// const EmployeeManagement = () => {\n//   const [employees, setEmployees] = useState([]);\n//   const [newEmployee, setNewEmployee] = useState({\n//     name: '',\n//     email: '',\n//     mobile: '',\n//     designation: '',\n//     gender: '',\n//     course: '',\n//     image: null,\n//   });\n\n//   // Fetch all employees\n//   useEffect(() => {\n//     const fetchEmployees = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/employees`, {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem('token')}`, // Use the token from login\n//           },\n//         });\n//         setEmployees(response.data);\n//       } catch (error) {\n//         console.error('Error fetching employees:', error);\n//       }\n//     };\n\n//     fetchEmployees();\n//   }, []);\n\n//   const handleCreateEmployee = async () => {\n//     const formData = new FormData();\n//     Object.keys(newEmployee).forEach(key => {\n//       formData.append(key, newEmployee[key]);\n//     });\n\n//     try {\n//       await axios.post(`${API_URL}/employees`, formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//     } catch (error) {\n//       console.error('Error creating employee:', error);\n//     }\n//   };\n\n//   const handleUpdateEmployee = async (id) => {\n//     const formData = new FormData();\n//     Object.keys(newEmployee).forEach(key => {\n//       formData.append(key, newEmployee[key]);\n//     });\n\n//     try {\n//       await axios.put(`${API_URL}/employees/${id}`, formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//     } catch (error) {\n//       console.error('Error updating employee:', error);\n//     }\n//   };\n\n//   const handleDeleteEmployee = async (id) => {\n//     try {\n//       await axios.delete(`${API_URL}/employees/${id}`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//     } catch (error) {\n//       console.error('Error deleting employee:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Employee Management</h2>\n//       {/* Form for creating or updating employees */}\n//       <input\n//         type=\"text\"\n//         value={newEmployee.name}\n//         onChange={(e) => setNewEmployee({ ...newEmployee, name: e.target.value })}\n//         placeholder=\"Name\"\n//       />\n//       {/* Add other input fields similarly */}\n//       <input\n//         type=\"file\"\n//         onChange={(e) => setNewEmployee({ ...newEmployee, image: e.target.files[0] })}\n//       />\n//       <button onClick={handleCreateEmployee}>Create Employee</button>\n\n//       <h3>Employee List</h3>\n//       <ul>\n//         {employees.map(emp => (\n//           <li key={emp._id}>\n//             {emp.name} - {emp.email}\n//             <button onClick={() => handleUpdateEmployee(emp._id)}>Update</button>\n//             <button onClick={() => handleDeleteEmployee(emp._id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// const App = () => {\n//   return (\n//     <div>\n//       <Login />\n//       <EmployeeManagement />\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const API_URL = 'http://localhost:5005'; // Backend URL\n\n// // Example component for login\n// const Login = ({ onLogin }) => {\n//   const [userName, setUserName] = useState('');\n//   const [password, setPassword] = useState('');\n\n//   const handleLogin = async () => {\n//     try {\n//       const response = await axios.post(`${API_URL}/auth/login`, { userName, password });\n//       localStorage.setItem('token', response.data.token);\n//       onLogin(); // Notify parent about successful login\n//     } catch (error) {\n//       console.error('Login error:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Login</h2>\n//       <input\n//         type=\"text\"\n//         value={userName}\n//         onChange={(e) => setUserName(e.target.value)}\n//         placeholder=\"Username\"\n//       />\n//       <input\n//         type=\"password\"\n//         value={password}\n//         onChange={(e) => setPassword(e.target.value)}\n//         placeholder=\"Password\"\n//       />\n//       <button onClick={handleLogin}>Login</button>\n//     </div>\n//   );\n// };\n\n// // Example component for managing employees\n// const EmployeeManagement = () => {\n//   const [employees, setEmployees] = useState([]);\n//   const [newEmployee, setNewEmployee] = useState({\n//     name: '',\n//     email: '',\n//     mobile: '',\n//     designation: '',\n//     gender: '',\n//     course: '',\n//     image: null,\n//   });\n//   const [editingEmployee, setEditingEmployee] = useState(null);\n\n//   // Fetch all employees\n//   useEffect(() => {\n//     const fetchEmployees = async () => {\n//       try {\n//         const response = await axios.get(`${API_URL}/employees`, {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem('token')}`, // Use the token from login\n//           },\n//         });\n//         setEmployees(response.data);\n//       } catch (error) {\n//         console.error('Error fetching employees:', error);\n//       }\n//     };\n\n//     fetchEmployees();\n//   }, []);\n\n//   const handleCreateEmployee = async () => {\n//     const formData = new FormData();\n//     Object.keys(newEmployee).forEach(key => {\n//       formData.append(key, newEmployee[key]);\n//     });\n\n//     try {\n//       if (editingEmployee) {\n//         await axios.put(`${API_URL}/employees/${editingEmployee._id}`, formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data',\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\n//           },\n//         });\n//       } else {\n//         await axios.post(`${API_URL}/employees`, formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data',\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\n//           },\n//         });\n//       }\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//       setNewEmployee({\n//         name: '',\n//         email: '',\n//         mobile: '',\n//         designation: '',\n//         gender: '',\n//         course: '',\n//         image: null,\n//       });\n//       setEditingEmployee(null); // Clear the editing state\n//     } catch (error) {\n//       console.error('Error saving employee:', error);\n//     }\n//   };\n\n//   const handleUpdateEmployee = (employee) => {\n//     setNewEmployee(employee);\n//     setEditingEmployee(employee);\n//   };\n\n//   const handleDeleteEmployee = async (id) => {\n//     try {\n//       await axios.delete(`${API_URL}/employees/${id}`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//     } catch (error) {\n//       console.error('Error deleting employee:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Employee Management</h2>\n//       <form onSubmit={(e) => { e.preventDefault(); handleCreateEmployee(); }}>\n//         <input\n//           type=\"text\"\n//           value={newEmployee.name}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, name: e.target.value })}\n//           placeholder=\"Name\"\n//           required\n//         />\n//         <input\n//           type=\"email\"\n//           value={newEmployee.email}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, email: e.target.value })}\n//           placeholder=\"Email\"\n//           required\n//         />\n//         <input\n//           type=\"text\"\n//           value={newEmployee.mobile}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, mobile: e.target.value })}\n//           placeholder=\"Mobile No\"\n//           required\n//         />\n//         <input\n//           type=\"text\"\n//           value={newEmployee.designation}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, designation: e.target.value })}\n//           placeholder=\"Designation\"\n//           required\n//         />\n//         <select\n//           value={newEmployee.gender}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, gender: e.target.value })}\n//           required\n//         >\n//           <option value=\"\">Select Gender</option>\n//           <option value=\"M\">Male</option>\n//           <option value=\"F\">Female</option>\n//         </select>\n//         <input\n//           type=\"text\"\n//           value={newEmployee.course}\n//           onChange={(e) => setNewEmployee({ ...newEmployee, course: e.target.value })}\n//           placeholder=\"Course\"\n//           required\n//         />\n//         <input\n//           type=\"file\"\n//           onChange={(e) => setNewEmployee({ ...newEmployee, image: e.target.files[0] })}\n//         />\n//         <button type=\"submit\">{editingEmployee ? 'Update Employee' : 'Create Employee'}</button>\n//       </form>\n\n//       <h3>Employee List</h3>\n//       <ul>\n//         {employees.map(emp => (\n//           <li key={emp._id}>\n//             {emp.name} - {emp.email}\n//             <button onClick={() => handleUpdateEmployee(emp)}>Update</button>\n//             <button onClick={() => handleDeleteEmployee(emp._id)}>Delete</button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// const App = () => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem('token'));\n\n//   const handleLogin = () => {\n//     setIsLoggedIn(true);\n//   };\n\n//   return (\n//     <div>\n//       {!isLoggedIn ? <Login onLogin={handleLogin} /> : <EmployeeManagement />}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // src/App.js\n// import React, { useState, useEffect } from 'react';\n// import { BrowserRouter as Router, Route, Routes, useNavigate } from 'react-router-dom';\n// import Navbar from './components/Navbar';\n// import Login from './components/Login';\n// import Register from './components/Register';\n// import Dashboard from './components/Dashboard';\n// import EmployeeList from './components/EmployeeList';\n// import CreateEmployee from './components/CreateEmployee';\n// import EditEmployee from './components/EditEmployee';\n// import TestComponent from './components/TestComponent';\n// import axios from 'axios';\n\n// const API_URL = 'http://localhost:5005'; // Backend URL\n\n// const App = () => {\n//   const [employees, setEmployees] = useState([]);\n//   const [newEmployee, setNewEmployee] = useState({\n//     name: '',\n//     email: '',\n//     mobile: '',\n//     designation: '',\n//     gender: '',\n//     course: '',\n//     image: null,\n//   });\n//   const [editingEmployee, setEditingEmployee] = useState(null);\n//   const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem('token'));\n\n//   useEffect(() => {\n//     if (isLoggedIn) {\n//       const fetchEmployees = async () => {\n//         try {\n//           const response = await axios.get(`${API_URL}/employees`, {\n//             headers: {\n//               Authorization: `Bearer ${localStorage.getItem('token')}`,\n//             },\n//           });\n//           setEmployees(response.data);\n//         } catch (error) {\n//           console.error('Error fetching employees:', error);\n//         }\n//       };\n\n//       fetchEmployees();\n//     }\n//   }, [isLoggedIn]);\n\n//   const handleCreateEmployee = async () => {\n//     const formData = new FormData();\n//     Object.keys(newEmployee).forEach(key => {\n//       formData.append(key, newEmployee[key]);\n//     });\n\n//     try {\n//       if (editingEmployee) {\n//         await axios.put(`${API_URL}/employees/${editingEmployee._id}`, formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data',\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\n//           },\n//         });\n//       } else {\n//         await axios.post(`${API_URL}/employees`, formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data',\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\n//           },\n//         });\n//       }\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//       setNewEmployee({\n//         name: '',\n//         email: '',\n//         mobile: '',\n//         designation: '',\n//         gender: '',\n//         course: '',\n//         image: null,\n//       });\n//       setEditingEmployee(null); // Clear the editing state\n//     } catch (error) {\n//       console.error('Error saving employee:', error);\n//     }\n//   };\n\n//   const handleUpdateEmployee = (employee) => {\n//     setNewEmployee(employee);\n//     setEditingEmployee(employee);\n//   };\n\n//   const handleDeleteEmployee = async (id) => {\n//     try {\n//       await axios.delete(`${API_URL}/employees/${id}`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       // Refresh the employee list\n//       const response = await axios.get(`${API_URL}/employees`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n//       setEmployees(response.data);\n//     } catch (error) {\n//       console.error('Error deleting employee:', error);\n//     }\n//   };\n\n//   const handleLogin = () => {\n//     setIsLoggedIn(true);\n//   };\n\n//   const handleLogout = () => {\n//     localStorage.removeItem('token');\n//     setIsLoggedIn(false);\n//   };\n\n//   return (\n//     <Router>\n//       {isLoggedIn && <Navbar onLogout={handleLogout} />}\n//       <Routes>\n//         <Route path=\"/\" element={isLoggedIn ? <Dashboard /> : <Register onLogin={handleLogin} />} />\n//         <Route path=\"/login\" element={<Login onLogin={handleLogin} />} />\n//         <Route path=\"/register\" element={<Register onLogin={handleLogin} />} />\n//         <Route path=\"/dashboard\" element={isLoggedIn ? <Dashboard /> : <Login onLogin={handleLogin} />} />\n//         <Route path=\"/employee-list\" element={isLoggedIn ? <EmployeeList employees={employees} onUpdateEmployee={handleUpdateEmployee} onDeleteEmployee={handleDeleteEmployee} /> : <Login onLogin={handleLogin} />} />\n//         <Route path=\"/create-employee\" element={isLoggedIn ? <CreateEmployee newEmployee={newEmployee} setNewEmployee={setNewEmployee} handleCreateEmployee={handleCreateEmployee} /> : <Login onLogin={handleLogin} />} />\n//         <Route path=\"/edit-employee/:id\" element={isLoggedIn ? <EditEmployee handleUpdateEmployee={handleUpdateEmployee} /> : <Login onLogin={handleLogin} />} />\n//         <Route path=\"/test\" element={<TestComponent />} />\n//       </Routes>\n//     </Router>\n//   );\n// };\n\n// export default App;\n"],"mappingsqCA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}