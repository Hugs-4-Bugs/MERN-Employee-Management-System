
# MERN Employee Management

## Overview

This project is a MERN stack application for managing employees. It includes user authentication, CRUD operations for employee data, and the ability to upload and manage employee images.

## Prerequisites

- Node.js
- MongoDB
- npm or yarn



### Steps to Generate a Secret Key Using randomkeygen.com:

1. **Visit the Website:**
   Go to [randomkeygen.com](https://randomkeygen.com/).

2. **Select a Key Format:**
   Scroll down to the "Codeigniter Encryption Keys" section or "Base64 Key" section. These keys are typically strong enough for use in web applications.

3. **Copy the Generated Key:**
   Click on the key you want to use, and it will be automatically copied to your clipboard.

4. **Set the Secret Key:**
   Paste this key into your environment configuration as mentioned earlier:

   ```plaintext
   SECRET_KEY=your_generated_secret_key_here
   ```

This method is user-friendly and provides secure, random keys that are ready to be used in your application. Just remember to keep your secret key private and secure.



## Generating a Random Secret Key using Mac Terminal or command prompt

For security purposes, it's important to use a strong, random secret key for your application. This key is used to sign and verify JWT tokens.

### Generating a Secret Key

You can generate a random secret key using various methods. Here are a few options:

1. **Using OpenSSL (Linux/Mac):**

   Open your terminal and run:

   ```bash
   openssl rand -base64 32
   ```

   This command generates a 32-byte random string encoded in base64, which is suitable for use as a secret key.

2. **Using Node.js:**

   If you have Node.js installed, you can generate a secret key with this command in your Node.js REPL or in a script:

   ```javascript
   require('crypto').randomBytes(64).toString('hex');
   ```

   This generates a 64-byte random string in hexadecimal format.

3. **Using an Online Tool:**

   You can also use online tools like [randomkeygen.com](https://randomkeygen.com/) to generate a random secret key.

### Setting the Secret Key

Once you have generated a secret key, add it to your environment variables. If you are using a `.env` file for configuration, it should look like this:

```plaintext
SECRET_KEY=your_generated_secret_key_here
```

Make sure that this file is not included in your version control to keep the key secure.


## Installation

1. **Clone the repository:**

   ```bash
   git clone https://github.com/your-repository-url.git
   cd mern-employee-management
   ```

2. **Install dependencies for the backend:**

   ```bash
   cd backend
   npm install
   ```

3. **Install dependencies for the frontend:**

   ```bash
   cd ../frontend
   npm install
   ```

4. **Run the development server:**

   - **Backend:**

     ```bash
     cd backend
     npm start
     ```

   - **Frontend:**

     ```bash
     cd frontend
     npm start
     ```

## API Testing

You can test the API using the following `curl` commands.

### 1. Register a New User

```bash
curl -X POST http://localhost:5005/register \
     -H "Content-Type: application/json" \
     -d '{
           "name": "Prabhat Kumar",
           "email": "prabhat@example.com",
           "password": "YourPassword"
         }'
```

### 2. Login User

```bash
curl -X POST http://localhost:5005/login \
     -H "Content-Type: application/json" \
     -d '{
           "email": "prabhat@example.com",
           "password": "YourPassword"
         }'
```

### 3. Create a New Employee

```bash
curl -X POST http://localhost:5005/employees \
     -H "Authorization: Bearer YOUR_JWT_TOKEN" \
     -H "Content-Type: multipart/form-data" \
     -F "name=John Doe" \
     -F "email=johndoe@example.com" \
     -F "mobile=9876543210" \
     -F "designation=Software Engineer" \
     -F "gender=M" \
     -F "course=B.Tech" \
     -F "image=@/path/to/your/image.jpg"
```

### 4. Get All Employees

```bash
curl -X GET http://localhost:5005/employees \
     -H "Authorization: Bearer YOUR_JWT_TOKEN"
```

### 5. Get a Single Employee by ID

```bash
curl -X GET http://localhost:5005/employees/EMPLOYEE_ID \
     -H "Authorization: Bearer YOUR_JWT_TOKEN"
```

### 6. Update an Employee by ID

```bash
curl -X PUT http://localhost:5005/employees/EMPLOYEE_ID \
     -H "Authorization: Bearer YOUR_JWT_TOKEN" \
     -H "Content-Type: multipart/form-data" \
     -F "name=Updated Name" \
     -F "email=updatedemail@example.com" \
     -F "mobile=1234567890" \
     -F "designation=Senior Engineer" \
     -F "gender=M" \
     -F "course=M.Tech" \
     -F "image=@/path/to/your/updated_image.jpg"
```

### 7. Delete an Employee by ID

```bash
curl -X DELETE http://localhost:5005/employees/EMPLOYEE_ID \
     -H "Authorization: Bearer YOUR_JWT_TOKEN"
```

### 8. Logout User

```bash
curl -X POST http://localhost:5005/logout \
     -H "Authorization: Bearer YOUR_JWT_TOKEN"
```

## Project Structure

- **backend/**: Contains the Express.js server, routes, models, and controllers.
- **frontend/**: Contains the React.js application.

## Contributing

Feel free to fork this repository, create a new branch, and submit a pull request. All contributions are welcome!

## License

This project is licensed under the MIT License.
